@model dynamic
@{
    ViewBag.Title = "New rental form";
}

<h2>New Rental Form</h2>


<form id="newRental">

    <div class="form-group">

        <label>Customer</label>
        <div id="div" class="tt-container">
            <input id="customer" name="customer" data-rule-isDeliquentOnPayment="true" data-rule-validCustomer="true"  required type="text" value="" class="form-control" />
        </div>
    </div>

    <div class="form-group">
        <label>Movie</label>
        <div id="div" class="tt-container">
            <input id="movie" name="movie"  data-rule-atLeastOneMovie="true" data-rule-moviesRentedLimit="true" type="text" value="" class="form-control" />
        </div>
       
    </div>

    <div class="row">
        <div class="col-md-4 col-sm-4">
            <ul id="movies" class="list-group"></ul>
        </div>
    </div>
    

    

    <button class="btn btn-primary">Submit</button>

</form>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")


    <script>
        $(document).ready(function () {
            var vm = {
                movieIds: []
            };



            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }

                 });
            $('#customer').typeahead({
                minLength: 3,
                highlight: true
            }, {
                name: 'customers',
                display: 'name',
                source: customers
            }).on("typeahead:select", function(e, customer) {
                vm.customerId = customer.id;
                vm.deliquentOnPayment = customer.deliquentOnPayment;
            });


            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/Movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#movie').typeahead({
                minLength: 3,
                highlight: true
            }, {
                name: 'movies',
                display: 'name',
                source: movies
            }).on("typeahead:select", function (e, movie) {
                $("#movies").append("<li class='list-group-item'>" + movie.name + "</li>");
                $("#movie").typeahead("val", "");
                vm.movieIds.push(movie.id);
            });


            $.validator.addMethod("validCustomer", function () {
                return vm.customerId && vm.customerId !== 0;
            }, "Please select a valid customer.");

            $.validator.addMethod("atLeastOneMovie", function () {
                return vm.movieIds.length > 0;
            }, "Please select at least one movie.");

              $.validator.addMethod("isDeliquentOnPayment", function () {
                return !vm.deliquentOnPayment;
            }, "Deliquent on payment");

                $.validator.addMethod("moviesRentedLimit", function () {
                return vm.movieIds.length < 5;
            }, "Please select max 4 movies.");



         var validator=   $("#newRental").validate({
                submitHandler: function () {
            
                    $.ajax({
                        url: "/API/Rental",
                        method: "post",
                        data: vm
                    })
                        .done(function () {
                            toastr.success("Rental successfully recorded.")
                            $("customer").typeahead("val", "");
                            $("movie").typeahead("val", "");
                            $("movies").empty();
                            vm = { movieIds: [] };
                            validator.resetForm();
                        })
                        .fail(function () {
                            toastr.error("Rental not recorded.Something unexpected happened.")
                        });

                        return false;

                }

               

            });


       
        });
    </script>
}